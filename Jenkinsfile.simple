pipeline {
    agent any
    
    environment {
        // Application settings
        APP_NAME = 'smchitfund-python-api'
        APP_PORT = '8000'
        
        // Docker settings
        DOCKER_IMAGE = "${APP_NAME}"
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_REGISTRY = 'your-docker-registry.com' // Update with your registry
        
        // Database settings (for testing)
        DB_HOST = 'localhost'
        DB_PORT = '3306'
        DB_NAME = 'test_smchitfund'
        DB_USER = 'test_user'
        DB_PASSWORD = credentials('db-password') // Store in Jenkins credentials
        
        // Deployment settings
        STAGING_SERVER = 'staging.smchitfund.com'
        PRODUCTION_SERVER = 'api.smchitfund.com'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
                
                script {
                    echo "Building ${APP_NAME} - Build #${BUILD_NUMBER}"
                    echo "Branch: ${env.BRANCH_NAME ?: 'main'}"
                    echo "Commit: ${env.GIT_COMMIT}"
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                echo 'Setting up Python environment...'
                sh '''
                    # Check Python availability
                    echo "Checking Python installation..."
                    python3 --version || python --version
                    
                    # Remove existing virtual environment if it exists
                    rm -rf venv || true
                    
                    # Create virtual environment
                    python3 -m venv venv || python -m venv venv
                    
                    # Activate virtual environment
                    . venv/bin/activate
                    
                    # Verify activation
                    which python
                    python --version
                    
                    # Upgrade pip
                    python -m pip install --upgrade pip
                    
                    # Install dependencies
                    pip install -r requirements.txt
                    
                    # Install development dependencies
                    pip install pytest pytest-cov pytest-asyncio httpx flake8 black isort mypy bandit safety
                    
                    # Display installed packages
                    pip list
                '''
            }
        }
        
        stage('Code Quality') {
            parallel {
                stage('Linting') {
                    steps {
                        echo 'Running code linting...'
                        sh '''
                            . venv/bin/activate
                            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
                        '''
                    }
                }
                
                stage('Formatting') {
                    steps {
                        echo 'Checking code formatting...'
                        sh '''
                            . venv/bin/activate
                            black --check --diff . || true
                            isort --check-only --diff . || true
                        '''
                    }
                }
                
                stage('Type Checking') {
                    steps {
                        echo 'Running type checking...'
                        sh '''
                            . venv/bin/activate
                            mypy . --ignore-missing-imports || true
                        '''
                    }
                }
            }
        }
        
        stage('Security Scan') {
            parallel {
                stage('Code Security') {
                    steps {
                        echo 'Running security analysis...'
                        sh '''
                            . venv/bin/activate
                            bandit -r . -f json -o bandit-report.json || true
                            bandit -r . || true
                        '''
                        archiveArtifacts artifacts: 'bandit-report.json', allowEmptyArchive: true
                    }
                }
                
                stage('Dependency Security') {
                    steps {
                        echo 'Checking dependency security...'
                        sh '''
                            . venv/bin/activate
                            safety check --json --output safety-report.json || true
                            safety check || true
                        '''
                        archiveArtifacts artifacts: 'safety-report.json', allowEmptyArchive: true
                    }
                }
            }
        }
        
        stage('Tests') {
            steps {
                echo 'Running tests...'
                sh '''
                    . venv/bin/activate
                    pytest test_*.py -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=test-results.xml
                '''
                
                // Publish test results
                publishTestResults testResultsPattern: 'test-results.xml'
                
                // Archive coverage report
                archiveArtifacts artifacts: 'htmlcov/**', allowEmptyArchive: true
            }
        }
        
        stage('Build Docker Image') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    changeRequest()
                }
            }
            steps {
                echo 'Building Docker image...'
                script {
                    // Create production Dockerfile
                    sh '''
                        cat > Dockerfile.prod << 'EOF'
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \\
    gcc \\
    default-libmysqlclient-dev \\
    pkg-config \\
    curl \\
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \\
    pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create non-root user
RUN adduser --disabled-password --gecos '' appuser && \\
    chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost:8000/api/ || exit 1

# Run the application
CMD ["python", "main.py"]
EOF
                    '''
                    
                    // Build Docker image
                    def image = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f Dockerfile.prod .")
                    
                    // Tag as latest for main branch
                    if (env.BRANCH_NAME == 'main') {
                        image.tag('latest')
                    }
                    
                    env.DOCKER_IMAGE_FULL = "${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                echo 'Deploying to staging environment...'
                script {
                    sh """
                        echo "Would deploy ${DOCKER_IMAGE_FULL} to staging"
                        echo "Staging server: ${STAGING_SERVER}"
                        # Add actual deployment commands here
                    """
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo 'Deploying to production environment...'
                input message: 'Deploy to production?', ok: 'Deploy'
                
                script {
                    sh """
                        echo "Would deploy ${DOCKER_IMAGE_FULL} to production"
                        echo "Production server: ${PRODUCTION_SERVER}"
                        # Add actual deployment commands here
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'Cleaning up...'
                
                try {
                    sh '''
                        # Remove virtual environment
                        rm -rf venv || true
                        
                        # Clean up Docker images (keep last 3 builds)
                        docker image prune -f || true
                    '''
                } catch (Exception e) {
                    echo "Cleanup failed: ${e.getMessage()}"
                }
                
                // Archive artifacts
                try {
                    archiveArtifacts artifacts: '**/*.log', allowEmptyArchive: true
                } catch (Exception e) {
                    echo "Artifact archiving failed: ${e.getMessage()}"
                }
            }
        }
        
        success {
            echo 'Pipeline completed successfully!'
        }
        
        failure {
            echo 'Pipeline failed!'
        }
    }
}